
  #################################################### Nightly Steps ############################################################
kind: pipeline
type: docker
name: retrofit-api-nightly
trigger:
  event:
    - cron
concurrency:
  limit: 1
volumes:
- name: docker_sock
  host:
    path: /var/run/docker.sock

steps:

  # Build docker images
  - name: build docker maven base
    image: docker:19.03.11-git
    commands:
      - docker build -t retrofit-api-base -f ci-cd-resources/Dockerfile.ci.base .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  - name: owasp dependency scan
    image: retrofit-api-base
    pull: never
    commands:
      - mvn org.owasp:dependency-check-maven:check -P security
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password


  ################################################# End Nightly Steps #######################################################
---


  ################################################### DEV Steps ########################################################
kind: pipeline
type: docker
name: retrofit-api-dev

trigger:
  branch:
    - develop
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
  - name: docker_sock
    host:
      path: /var/run/docker.sock

  - name: package_directory
    temp: {}

  - name: m2_repo
    temp: {}

services:
  - name: postgres
    image: postgres:11-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: caz_vcc
    ports:
      - 5432
  - name: localstack
    image: localstack/localstack:0.10.2
    environment:
      SERVICES: s3
    ports:
      - 4572

steps:

  # Clean agent images and containers to prevent disk space overuse
  - name: clean agent
    image: docker:19.03.11-git
    commands:
      - docker system prune -f
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Build docker images
  - name: build docker maven base
    image: docker:19.03.11-git
    commands:
      - docker build -t retrofit-api-base -f ci-cd-resources/Dockerfile.ci.base .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Unit test
  - name: unit test
    image: retrofit-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    pull: never
    commands:
      - mvn test -P jacoco --no-transfer-progress
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password

  # IT test
  - name: IT test
    image: retrofit-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    pull: never
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password
      BUILD_ID: ${DRONE_BUILD_NUMBER}
      POSTGRES_URL: postgres:5432
      AWS_S3_URL: localstack:4572
    commands:
      - mvn verify -DskipUnitTests -P jacoco --no-transfer-progress

  # Package
  - name: package deployable zip
    image: retrofit-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password
      BUILD_ID: ${DRONE_BUILD_NUMBER}
    pull: never
    commands:
      - mvn package -DskipUnitTests --no-transfer-progress

  # Scan with sonar
  - name: sonar scan
    image: retrofit-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password
      SONAR_HOST:
        from_secret: jaqu_lower_sonar_host
      SONAR_TOKEN:
        from_secret: jaqu_lower_sonar_token
    pull: never
    commands:
      - mvn sonar:sonar -Dsonar.host.url=$SONAR_HOST
        -Dsonar.projectName=${DRONE_REPO}
        -Dsonar.login=$SONAR_TOKEN
        -Dsonar.coverage.jacoco.xmlReportPaths=/drone/src/target/site/jacoco-aggregate/jacoco.xml
        -Dsonar.tests=src/test/java,src/it/java --no-transfer-progress

  # Invoke terraform apply for dev
  - name: deploy to dev
    image: hashicorp/terraform:0.12.3
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout lower_dev
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform-iac/projects/retrofit/layers/01.api
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select dev  || tf workspace new dev
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_lower_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_lower_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_lower_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_lower_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-lower
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    volumes:
      - name: package_directory
        path: /opt/package
    when:
      event:
        - push

  # shift traffic to new lambda version using codedeploy
  - name: codedeploy api dev
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_jaqu_caz_function.sh . --profile target_acc
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_register_csv_from_s3_function.sh . --profile target_acc
      - bash deploy_jaqu_caz_function.sh
      - bash deploy_register_csv_from_s3_function.sh
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_lower_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_lower_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::311075478274:role/jaqu-lowerServiceRole
      PROJECT: retrofit
      DEPLOY_ENVIRONMENT: dev
      LAMBDA_BUCKET: jaqu-shared-project-lambda-bucket
    when:
      event:
        - push

  # subscribe to operational monitoring alert in api dev
  - name: subscribe to operational monitoring alert in api dev
    image: alpine:3.11.6
    commands:
      - apk add --update python3 groff
      - pip3 install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - python3 ./ci-cd-resources/subscribe_to_alert_topic_iac_restructure.py -e freeable-memory -e 4xx -e usage -e evictions -e csv -i dev -i retrofit JAQU-CAZ-OPERATIONALMONITORING@informed.com
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_lower_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_lower_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::311075478274:role/jaqu-lowerServiceRole
      PROJECT: retrofit
      DEPLOY_ENVIRONMENT: dev
    when:
      event:
        - push

  # Loads test fixtures data
  - name: load test fixtures
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - >
        aws lambda invoke --invocation-type RequestResponse --function-name retrofit-jaqu-caz-lambda-dev --payload "{\"requestContext\": {\"identity\": {}},\"httpMethod\": \"POST\",\"path\": \"/v1/load-test-data\", \"multiValueHeaders\":{\"x-correlation-id\":[\"fecbc670-c767-4c63-930d-c3d0fe188ea8\"]}}" --profile target_acc output.json
      - status_code=$(cat output.json | jq '.statusCode')
      - if [ $status_code == "204" ]; then exit 0; else exit 1; fi
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_lower_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_lower_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::311075478274:role/jaqu-lowerServiceRole
    when:
      event:
        - push
  ################################################# End Development Only #######################################################
---
################################################### ST Environment Steps ########################################################

kind: pipeline
type: docker
name: retrofit-api-st

trigger:
  branch:
    - release-candidate/*
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
  - name: docker_sock
    host:
      path: /var/run/docker.sock

  - name: package_directory
    temp: {}

  - name: m2_repo
    temp: {}

services:
  - name: postgres
    image: postgres:11-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: caz_vcc
    ports:
      - 5432
  - name: localstack
    image: localstack/localstack:0.10.2
    environment:
      SERVICES: s3
    ports:
      - 4572

steps:

  # Clean agent images and containers to prevent disk space overuse
  - name: clean agent
    image: docker:19.03.11-git
    commands:
      - docker system prune -f
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Build docker images
  - name: build docker maven base
    image: docker:19.03.11-git
    commands:
      - docker build -t retrofit-api-base -f ci-cd-resources/Dockerfile.ci.base .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Unit test
  - name: unit test
    image: retrofit-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    pull: never
    commands:
      - mvn test -P jacoco --no-transfer-progress
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password

  # IT test
  - name: IT test
    image: retrofit-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    pull: never
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password
      BUILD_ID: ${DRONE_BUILD_NUMBER}
      POSTGRES_URL: postgres:5432
      AWS_S3_URL: localstack:4572
    commands:
      - mvn verify -DskipUnitTests -P jacoco --no-transfer-progress

  # Package
  - name: package deployable zip
    image: retrofit-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password
      BUILD_ID: ${DRONE_BUILD_NUMBER}
    pull: never
    commands:
      - mvn package -DskipUnitTests --no-transfer-progress

  - name: plan updates in st
    image: hashicorp/terraform:0.12.3
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout controlled_st
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform-iac/projects/retrofit/layers/01.api
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select st  || tf workspace new st
      - tf plan
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_controlled_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_controlled_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-controlled
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    volumes:
      - name: package_directory
        path: /opt/package
    when:
      event:
        - pull_request

  - name: provisioning warning
    image: docker:19.03.11-git
    commands:
      - echo "Pipeline failed. If a deployment is being made for the first time into an environment terraform backends will not yet exist which means this is to be expected. If not terraform related, please see logs for further details"
    when:
      status:
        - failure

  # Invoke terraform apply for dev
  - name: deploy to st
    image: hashicorp/terraform:0.12.3
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout controlled_st
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform-iac/projects/retrofit/layers/01.api
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select st  || tf workspace new st
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_controlled_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_controlled_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-controlled
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    volumes:
      - name: package_directory
        path: /opt/package
    when:
      event:
        - push

  # shift traffic to new lambda version using codedeploy
  - name: codedeploy api st
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_jaqu_caz_function.sh . --profile target_acc
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_register_csv_from_s3_function.sh . --profile target_acc
      - bash deploy_jaqu_caz_function.sh
      - bash deploy_register_csv_from_s3_function.sh
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
      PROJECT: retrofit
      DEPLOY_ENVIRONMENT: st
      LAMBDA_BUCKET: jaqu-shared-project-lambda-bucket
    when:
      event:
        - push

  # subscribe to operational monitoring alert in api dev
  - name: subscribe to operational monitoring alert in api st
    image: alpine:3.11.6
    commands:
      - apk add --update python3 groff
      - pip3 install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - python3 ./ci-cd-resources/subscribe_to_alert_topic_iac_restructure.py -e freeable-memory -e 4xx -e usage -e evictions -e csv -i st -i retrofit JAQU-CAZ-OPERATIONALMONITORING@informed.com
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
      PROJECT: retrofit
      DEPLOY_ENVIRONMENT: st
    when:
      event:
        - push

# Loads test fixtures data
  - name: load test fixtures
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - >
        aws lambda invoke --invocation-type RequestResponse --function-name retrofit-jaqu-caz-lambda-st --payload "{\"requestContext\": {\"identity\": {}},\"httpMethod\": \"POST\",\"path\": \"/v1/load-test-data\", \"multiValueHeaders\":{\"x-correlation-id\":[\"fecbc670-c767-4c63-930d-c3d0fe188ea8\"]}}" --profile target_acc output.json
      - status_code=$(cat output.json | jq '.statusCode')
      - if [ $status_code == "204" ]; then exit 0; else exit 1; fi
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
    when:
      event:
  ################################################# End ST Environment Steps #######################################################
---












################################################### SIT Environment Steps ########################################################

kind: pipeline
type: docker
name: retrofit-api-sit

trigger:
  branch:
    - release/*
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
  - name: docker_sock
    host:
      path: /var/run/docker.sock

  - name: package_directory
    temp: {}

  - name: m2_repo
    temp: {}

services:
  - name: postgres
    image: postgres:11-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: caz_vcc
    ports:
      - 5432
  - name: localstack
    image: localstack/localstack:0.10.2
    environment:
      SERVICES: s3
    ports:
      - 4572

steps:

  # Clean agent images and containers to prevent disk space overuse
  - name: clean agent
    image: docker:19.03.11-git
    commands:
      - docker system prune -f
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Build docker images
  - name: build docker maven base
    image: docker:19.03.11-git
    commands:
      - docker build -t retrofit-api-base -f ci-cd-resources/Dockerfile.ci.base .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Unit test
  - name: unit test
    image: retrofit-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    pull: never
    commands:
      - mvn test -P jacoco --no-transfer-progress
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password

  # IT test
  - name: IT test
    image: retrofit-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    pull: never
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password
      BUILD_ID: ${DRONE_BUILD_NUMBER}
      POSTGRES_URL: postgres:5432
      AWS_S3_URL: localstack:4572
    commands:
      - mvn verify -DskipUnitTests -P jacoco --no-transfer-progress

  # Package
  - name: package deployable zip
    image: retrofit-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password
      BUILD_ID: ${DRONE_BUILD_NUMBER}
    pull: never
    commands:
      - mvn package -DskipUnitTests --no-transfer-progress

  - name: plan terraform updates into sit
    image: hashicorp/terraform:0.12.3
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout controlled_sit
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform-iac/projects/retrofit/layers/01.api
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select sit  || tf workspace new sit
      - tf plan
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_controlled_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_controlled_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-controlled
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    volumes:
      - name: package_directory
        path: /opt/package
    when:
      event:
        - pull_request

  - name: provisioning warning
    image: docker:19.03.11-git
    commands:
      - echo "Pipeline failed. If a deployment is being made for the first time into an environment terraform backends will not yet exist which means this is to be expected. If not terraform related, please see logs for further details"
    when:
      status:
        - failure

  # Invoke terraform apply for dev
  - name: deploy to sit
    image: hashicorp/terraform:0.12.3
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout controlled_sit
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform-iac/projects/retrofit/layers/01.api
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select sit  || tf workspace new sit
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_controlled_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_controlled_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-controlled
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    volumes:
      - name: package_directory
        path: /opt/package
    when:
      event:
        - push

  # shift traffic to new lambda version using codedeploy
  - name: codedeploy api sit
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_jaqu_caz_function.sh . --profile target_acc
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_register_csv_from_s3_function.sh . --profile target_acc
      - bash deploy_jaqu_caz_function.sh
      - bash deploy_register_csv_from_s3_function.sh
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
      PROJECT: retrofit
      DEPLOY_ENVIRONMENT: sit
      LAMBDA_BUCKET: jaqu-shared-project-lambda-bucket
    when:
      event:
        - push

  # subscribe to operational monitoring alert in api dev
  - name: subscribe to operational monitoring alert in api sit
    image: alpine:3.11.6
    commands:
      - apk add --update python3 groff
      - pip3 install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - python3 ./ci-cd-resources/subscribe_to_alert_topic_iac_restructure.py -e freeable-memory -e 4xx -e usage -e evictions -e csv -i sit -i retrofit ISSupport-CAZ@informed.com
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
      PROJECT: retrofit
      DEPLOY_ENVIRONMENT: sit
    when:
      event:
        - push


  ################################################# End of SIT Environment Steps #######################################################


---


################################################### Preprod Environment Steps ########################################################
kind: pipeline
type: docker
name: retrofit-api-preprod

trigger:
  branch:
    - staging
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
  - name: package_directory
    temp: {}

steps:

  - name: plan terraform updates into preprod
    image: hashicorp/terraform:0.12.3
    commands:
      - apk add --update bash python python-dev py-pip build-base jq wget
      - pip install awscli
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $SRC_AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - LAMBDA_FUNCTION=retrofit-csv-from-s3-lambda-sit
      - ENV=sit
      - SIGNED_URL=`aws lambda get-function --profile target_acc --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Code.Location'`
      - VERSION=`aws lambda get-function --profile target_acc --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Configuration.Version'`
      - wget -O /opt/package/$LAMBDA_FUNCTION-$VERSION.zip $SIGNED_URL
      - export TF_VAR_lambda_file=/opt/package/$LAMBDA_FUNCTION-$VERSION.zip
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout staging_preprod
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform-iac/projects/retrofit/layers/01.api
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select preprod  || tf workspace new preprod
      - tf plan
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_staging_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_staging_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      SRC_AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-staging
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    volumes:
      - name: package_directory
        path: /opt/package
    when:
      event:
        - pull_request

  - name: provisioning warning
    image: docker:19.03.11-git
    commands:
      - echo "Pipeline failed. If a deployment is being made for the first time into an environment terraform backends will not yet exist which means this is to be expected. If not terraform related, please see logs for further details"
    when:
      status:
        - failure

  # Invoke terraform apply for dev
  - name: deploy to preprod
    image: hashicorp/terraform:0.12.3
    commands:
      - apk add --update bash python python-dev py-pip build-base jq wget
      - pip install awscli
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $SRC_AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - LAMBDA_FUNCTION=retrofit-csv-from-s3-lambda-sit
      - ENV=sit
      - SIGNED_URL=`aws lambda get-function --profile target_acc --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Code.Location'`
      - VERSION=`aws lambda get-function --profile target_acc --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Configuration.Version'`
      - wget -O /opt/package/$LAMBDA_FUNCTION-$VERSION.zip $SIGNED_URL
      - export TF_VAR_lambda_file=/opt/package/$LAMBDA_FUNCTION-$VERSION.zip
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout staging_preprod
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform-iac/projects/retrofit/layers/01.api
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select preprod  || tf workspace new preprod
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_staging_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_staging_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      SRC_AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-staging
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    volumes:
      - name: package_directory
        path: /opt/package
    when:
      event:
        - push

  # shift traffic to new lambda version using codedeploy
  - name: codedeploy api preprod
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_jaqu_caz_function.sh . --profile target_acc
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_register_csv_from_s3_function.sh . --profile target_acc
      - bash deploy_jaqu_caz_function.sh
      - bash deploy_register_csv_from_s3_function.sh
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::360470905865:role/jaqu-stagingServiceRole
      PROJECT: retrofit
      DEPLOY_ENVIRONMENT: preprod
      LAMBDA_BUCKET: jaqu-shared-project-lambda-bucket
    when:
      event:
        - push

  # subscribe to operational monitoring alert in api dev
  - name: subscribe to operational monitoring alert in api preprod
    image: alpine:3.11.6
    commands:
      - apk add --update python3 groff
      - pip3 install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - python3 ./ci-cd-resources/subscribe_to_alert_topic_iac_restructure.py -e freeable-memory -e 4xx -e usage -e evictions -e csv -i preprod -i retrofit ISSupport-CAZ@informed.com
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::360470905865:role/jaqu-stagingServiceRole
      PROJECT: retrofit
      DEPLOY_ENVIRONMENT: preprod
    when:
      event:
        - push


  ################################################# End of Preprod Steps #######################################################





---
################################################### UAT Environment Steps ########################################################

kind: pipeline
type: docker
name: retrofit-api-uat

trigger:
  branch:
    - uat/*
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
  - name: docker_sock
    host:
      path: /var/run/docker.sock

  - name: package_directory
    temp: {}

  - name: m2_repo
    temp: {}

services:
  - name: postgres
    image: postgres:11-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: caz_vcc
    ports:
      - 5432
  - name: localstack
    image: localstack/localstack:0.10.2
    environment:
      SERVICES: s3
    ports:
      - 4572
steps:

  # Clean agent images and containers to prevent disk space overuse
  - name: clean agent
    image: docker:19.03.11-git
    commands:
      - docker system prune -f
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Build docker images
  - name: build docker maven base
    image: docker:19.03.11-git
    commands:
      - docker build -t retrofit-api-base -f ci-cd-resources/Dockerfile.ci.base .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Unit test
  - name: unit test
    image: retrofit-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    pull: never
    commands:
      - mvn test -P jacoco --no-transfer-progress
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password

  # IT test
  - name: IT test
    image: retrofit-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    pull: never
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password
      BUILD_ID: ${DRONE_BUILD_NUMBER}
      POSTGRES_URL: postgres:5432
      AWS_S3_URL: localstack:4572
    commands:
      - mvn verify -DskipUnitTests -P jacoco --no-transfer-progress

  # Package
  - name: package deployable zip
    image: retrofit-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password
      BUILD_ID: ${DRONE_BUILD_NUMBER}
    pull: never
    commands:
      - mvn package -DskipUnitTests --no-transfer-progress

  - name: plan updates in uat
    image: hashicorp/terraform:0.12.3
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout staging_uat
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform-iac/projects/retrofit/layers/01.api
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select uat  || tf workspace new uat
      - tf plan
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_staging_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_staging_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-staging
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    volumes:
      - name: package_directory
        path: /opt/package
    when:
      event:
        - pull_request

  - name: provisioning warning
    image: docker:19.03.11-git
    commands:
      - echo "Pipeline failed. If a deployment is being made for the first time into an environment terraform backends will not yet exist which means this is to be expected. If not terraform related, please see logs for further details"
    when:
      status:
        - failure

  # Invoke terraform apply for dev
  - name: deploy to uat
    image: hashicorp/terraform:0.12.3
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout staging_uat
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform-iac/projects/retrofit/layers/01.api
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select uat  || tf workspace new uat
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_staging_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_staging_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-staging
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    volumes:
      - name: package_directory
        path: /opt/package
    when:
      event:
        - push

  # shift traffic to new lambda version using codedeploy
  - name: codedeploy api uat
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_jaqu_caz_function.sh . --profile target_acc
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_register_csv_from_s3_function.sh . --profile target_acc
      - bash deploy_jaqu_caz_function.sh
      - bash deploy_register_csv_from_s3_function.sh
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::360470905865:role/jaqu-stagingServiceRole
      PROJECT: retrofit
      DEPLOY_ENVIRONMENT: uat
      LAMBDA_BUCKET: jaqu-shared-project-lambda-bucket
    when:
      event:
        - push

  # subscribe to operational monitoring alert in api dev
  - name: subscribe to operational monitoring alert in api uat
    image: alpine:3.11.6
    commands:
      - apk add --update python3 groff
      - pip3 install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - python3 ./ci-cd-resources/subscribe_to_alert_topic_iac_restructure.py -e freeable-memory -e 4xx -e usage -e evictions -e csv -i uat -i retrofit JAQU-CAZ-OPERATIONALMONITORING@informed.com
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::360470905865:role/jaqu-stagingServiceRole
      PROJECT: retrofit
      DEPLOY_ENVIRONMENT: uat
    when:
      event:
        - push


  ################################################# End UAT Environment Steps #######################################################
---


################################################### Prod Environment Steps ########################################################
kind: pipeline
type: docker
name: retrofit-api-prod

trigger:
  branch:
    - master
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
  - name: package_directory
    temp: {}

steps:

  - name: plan terraform updates into prod
    image: hashicorp/terraform:0.12.3
    commands:
      - apk add --update bash python python-dev py-pip build-base jq wget
      - pip install awscli
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $SRC_AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - LAMBDA_FUNCTION=retrofit-csv-from-s3-lambda-preprod
      - ENV=preprod
      - SIGNED_URL=`aws lambda get-function --profile target_acc --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Code.Location'`
      - VERSION=`aws lambda get-function --profile target_acc --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Configuration.Version'`
      - wget -O /opt/package/$LAMBDA_FUNCTION-$VERSION.zip $SIGNED_URL
      - export TF_VAR_lambda_file=/opt/package/$LAMBDA_FUNCTION-$VERSION.zip
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout prod_live
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform-iac/projects/retrofit/layers/01.api
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select prod  || tf workspace new prod
      - tf plan
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_prod_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_prod_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_prod_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_prod_aws_secret_access_key
      SRC_AWS_ACCOUNT_ROLE: arn:aws:iam::360470905865:role/jaqu-stagingServiceRole
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-prod
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    volumes:
      - name: package_directory
        path: /opt/package
    when:
      event:
        - pull_request

  - name: provisioning warning
    image: docker:19.03.11-git
    commands:
      - echo "Pipeline failed. If a deployment is being made for the first time into an environment terraform backends will not yet exist which means this is to be expected. If not terraform related, please see logs for further details"
    when:
      status:
        - failure

  # Invoke terraform apply for dev
  - name: deploy to prod
    image: hashicorp/terraform:0.12.3
    commands:
      - apk add --update bash python python-dev py-pip build-base jq wget
      - pip install awscli
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $SRC_AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - LAMBDA_FUNCTION=retrofit-csv-from-s3-lambda-preprod
      - ENV=preprod
      - SIGNED_URL=`aws lambda get-function --profile target_acc --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Code.Location'`
      - VERSION=`aws lambda get-function --profile target_acc --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Configuration.Version'`
      - wget -O /opt/package/$LAMBDA_FUNCTION-$VERSION.zip $SIGNED_URL
      - export TF_VAR_lambda_file=/opt/package/$LAMBDA_FUNCTION-$VERSION.zip
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout prod_live
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform-iac/projects/retrofit/layers/01.api
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select prod  || tf workspace new prod
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_prod_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_prod_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_prod_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_prod_aws_secret_access_key
      SRC_AWS_ACCOUNT_ROLE: arn:aws:iam::360470905865:role/jaqu-stagingServiceRole
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-prod
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    volumes:
      - name: package_directory
        path: /opt/package
    when:
      event:
        - push

  # shift traffic to new lambda version using codedeploy
  - name: codedeploy api prod
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_jaqu_caz_function.sh . --profile target_acc
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_register_csv_from_s3_function.sh . --profile target_acc
      - bash deploy_jaqu_caz_function.sh
      - bash deploy_register_csv_from_s3_function.sh
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_prod_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_prod_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::286199435714:role/jaqu-prodServiceRole
      PROJECT: retrofit
      DEPLOY_ENVIRONMENT: prod
      LAMBDA_BUCKET: jaqu-shared-project-lambda-bucket
    when:
      event:
        - push

  # subscribe to operational monitoring alert in api dev
  - name: subscribe to operational monitoring alert in api prod
    image: alpine:3.11.6
    commands:
      - apk add --update python3 groff
      - pip3 install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - python3 ./ci-cd-resources/subscribe_to_alert_topic_iac_restructure.py -e freeable-memory -e 4xx -e usage -e evictions -e csv -i prod -i retrofit ISSupport-CAZ@informed.com
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_prod_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_prod_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::286199435714:role/jaqu-prodServiceRole
      PROJECT: retrofit
      DEPLOY_ENVIRONMENT: prod
    when:
      event:
        - push


  ################################################# End of Prod Steps #######################################################










  ################################################ Secrets #########################################################

# Note the below values are pulled from AWS Secrets Manager via the aws-secrets Drone plugin
---
kind: secret
name: jaqu_lower_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsLowerAccessKeyId

---
kind: secret
name: jaqu_lower_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsLowerSecretAccessKey

---
kind: secret
name: jaqu_controlled_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsControlledAccessKeyId

---
kind: secret
name: jaqu_controlled_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsControlledSecretAccessKey

---
kind: secret
name: jaqu_staging_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsStagingAccessKeyId

---
kind: secret
name: jaqu_staging_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsStagingSecretAccessKey


---
kind: secret
name: jaqu_prod_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsProdAccessKeyId

---
kind: secret
name: jaqu_prod_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsProdSecretAccessKey


---
kind: secret
name: jaqu_master_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsMasterAccessKeyId

---
kind: secret
name: jaqu_master_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsMasterSecretAccessKey

---
kind: secret
name: jaqu_lower_sonar_host
get:
  path: /build-tools/drone
  name: sonarHost

---
kind: secret
name: jaqu_lower_sonar_token
get:
  path: /build-tools/drone
  name: sonarToken

---
kind: secret
name: jaqu_lower_github_private_key
get:
  path: /build-tools/drone
  name: githubPrivateKey

---
kind: secret
name: jaqu_lower_nexus_url
get:
  path: /build-tools/drone
  name: nexusUrl

---
kind: secret
name: jaqu_lower_nexus_username
get:
  path: /build-tools/drone
  name: nexusUsername

---
kind: secret
name: jaqu_lower_nexus_password
get:
  path: /build-tools/drone
  name: nexusPassword


  ################################################ End Secrets #########################################################
