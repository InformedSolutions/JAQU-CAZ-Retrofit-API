kind: pipeline
name: ci

services:
  - name: postgres
    image: postgres:11-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: caz_vcc
    ports:
      - 5432
  - name: localstack
    image: localstack/localstack
    environment:
      SERVICES: s3
    ports:
      - 4572

steps:

  # Clean agent images and containers to prevent disk space overuse
  - name: clean agent
    image: docker
    commands:
      - docker system prune -f
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Prepare configuration for Maven and Nexus
  - name: prepare maven and nexus config
    image: alpine
    commands:
      - sed -i 's|${env.JAQU_NEXUS_URL}|'"$JAQU_NEXUS_URL"'|g' ci-cd-resources/settings.ci.xml.template
      - sed -i 's|${env.JAQU_NEXUS_USER}|'"$JAQU_NEXUS_USER"'|g' ci-cd-resources/settings.ci.xml.template
      - sed -i 's|${env.JAQU_NEXUS_PASSWORD}|'"$JAQU_NEXUS_PASSWORD"'|g' ci-cd-resources/settings.ci.xml.template
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    environment:
      JAQU_NEXUS_URL:
        from_secret: nexus_url
      JAQU_NEXUS_USER:
        from_secret: nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: nexus_password

  # Build docker images
  - name: build docker maven base
    image: docker
    commands:
      - docker build -t retrofit-api-base -f ci-cd-resources/Dockerfile.ci.base .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Unit test
  - name: unit test
    image: retrofit-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    pull: never
    commands:
      - mvn test -P jacoco --no-transfer-progress

  # IT test
  - name: IT test
    image: retrofit-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    pull: never
    environment:
      BUILD_ID: ${DRONE_BUILD_NUMBER}
      POSTGRES_URL: postgres:5432
      AWS_S3_URL: localstack:4572
    commands:
      - mvn verify -DskipUnitTests -P jacoco --no-transfer-progress

  # Package
  - name: package deployable zip
    image: retrofit-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    environment:
      BUILD_ID: ${DRONE_BUILD_NUMBER}
    pull: never
    commands:
      - mvn package -DskipUnitTests --no-transfer-progress

  # Scan with sonar
  - name: sonar scan
    image: retrofit-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    environment:
      sonar_host:
        from_secret: sonar_host
      sonar_token:
        from_secret: sonar_token
    pull: never
    commands:
      - mvn sonar:sonar -Dsonar.host.url=$sonar_host
        -Dsonar.projectKey=${DRONE_REPO}
        -Dsonar.projectName=${DRONE_REPO}
        -Dsonar.login=$sonar_token
        -Dsonar.coverage.jacoco.xmlReportPaths=/drone/src/target/site/jacoco-aggregate/jacoco.xml
        -Dsonar.tests=src/test/java,src/it/java --no-transfer-progress

  # Invoke terraform apply for dev
  - name: deploy to dev
    image: hashicorp/terraform:0.12.3
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -n "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform/projects/retrofit/layers/00.global
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select default
      - tf apply -auto-approve
      - cd ../01.networking
      - tf init
      - tf workspace select dev
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select dev
      - tf apply -auto-approve
      - cd ../03.api
      - tf init
      - tf workspace select dev
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: aws_access_key_id
      TF_VAR_secret_key:
        from_secret: aws_secret_access_key
      GIT_PRIVATE_SSH:
        from_secret: github_private_key
    volumes:
      - name: package_directory
        path: /opt/package
    when:
      event:
        exclude:
          - pull_request
      branch: develop

  # Invoke terraform apply for sit
  - name: deploy to sit
    image: hashicorp/terraform:0.12.3
    commands:
      - mkdir /root/.ssh
      - echo -n "$GIT_PRIVATE_SSH" > /root/.ssh/id_rsa
      - chmod 600 /root/.ssh/id_rsa
      - touch /root/.ssh/known_hosts
      - chmod 600 /root/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC/terraform/projects/retrofit-api/environments/sit
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - terraform init
      - terraform workspace select sit || terraform workspace new sit
      - terraform init
      - terraform apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: aws_access_key_id
      TF_VAR_secret_key:
        from_secret: aws_secret_access_key
      TF_VAR_db_user: vccsservice
      TF_VAR_db_password:
        from_secret: db_password
      GIT_PRIVATE_SSH:
        from_secret: github_private_key
    volumes:
      - name: package_directory
        path: /opt/package
    when:
      event:
        exclude:
          - pull_request
      branch: release/*

      # Build end to end tests docker image
  - name: build end to end test image
    image: docker:git
    commands:
      - mkdir ~/.ssh
      - echo -n "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-QA-selenium.git
      - cd JAQU-CAZ-QA-selenium
      - docker build -t selenium-jaqu .
    environment:
      GIT_PRIVATE_SSH:
        from_secret: github_private_key
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    # when:
    #   event:
    #     exclude:
    #     - pull_request
    #   branch: develop

    # Run end to end tests
  - name: run end to end tests
    image: selenium-jaqu
    pull: never
    environment:
      BS_USERNAME:
        from_secret: browserstack_username
      BS_AUTHKEY:
        from_secret: browserstack_auth_key
      BASEURL_RETRO: 'http://retrofit-alb-dev-1428410439.eu-west-2.elb.amazonaws.com/'
      VALID_USERNAME: 'edmond.chhung@informed.com'
      VALID_PASSWORD: 'Edc123.,'
      BROWSER_SET: 'mid'
      SCREENSHOT_TYPE: 'base'
      VCCS_USER: 'vccsservice'
      VCCS_PASSWORD: 'Password001!'
      SPECTRE: false
      LOCATION: browserstack
    commands:
      - export BUILD=RETRO-API-$DRONE_BUILD_NUMBER
      - cd JAQU-CAZ-QA-selenium
      - cucumber -t @RETRO --retry 3
    # when:
    #   event:
    #     exclude:
    #     - pull_request
    #   branch: develop

volumes:

  - name: docker_sock
    host:
      path: /var/run/docker.sock

  - name: package_directory
    temp: {}

  - name: m2_repo
    temp: {}

# Triggers
trigger:
  branch:
    - develop
    - release/*
  event:
    - pull_request
    - push

# Note the below values are pulled from AWS Secrets Manager via the aws-secrets Drone plugin
---
kind: secret
name: aws_access_key_id
get:
  path: /secret/drone.global
  name: awsAccessKeyId
  
---
kind: secret
name: aws_secret_access_key
get:
  path: /secret/drone.global
  name: awsSecretAccessKey
  
---
kind: secret
name: sonar_host
get:
  path: /secret/drone.global
  name: sonarHost
  
---
kind: secret
name: sonar_token
get:
  path: /secret/drone.global
  name: sonarToken

---
kind: secret
name: github_private_key
get:
  path: /secret/drone.global
  name: githubPrivateKey

---
kind: secret
name: nexus_url
get:
  path: /secret/drone.global
  name: nexusUrl

---
kind: secret
name: nexus_username
get:
  path: /secret/drone.global
  name: nexusUsername

---
kind: secret
name: nexus_password
get:
  path: /secret/drone.global
  name: nexusPassword

---
kind: secret
name: browserstack_auth_key
get:
  path: /secret/drone.global
  name: browserStackAuthKey

---
kind: secret
name: browserstack_username
get:
  path: /secret/drone.global
  name: browserStackUsername
